#!/usr/bin/python3
# -*- coding: utf-8 -*-

import sys , os, io, re, datetime
from tempfile import tempdir
#import mysql.connector
import psycopg2


dir_path = os.path.dirname(os.path.realpath(__file__))
sys.path.append(dir_path)

__IS_VERSION_3__= sys.version_info.major == 3

from gen_config import FIELD_NAME_ENUM_TYPES, ENUM_PACKAGE, con_opts

where_sql = "WHERE cd_pid IS NULL and cd_id < 9999 order by cd_id"

class CodeGroup:
    def __init__(self, **kwargs):
        # print (kwargs)
        self.gcode    = kwargs['cd_id']
        self.gname    = kwargs['cd_nm']
        self.gname_disp = kwargs['cd_disp_nm']
        self.gname_disp_eng = kwargs['cd_disp_nm_eng']
        self.desc    = kwargs['dscrpt']
        self.genum_name = kwargs['src_nm'].replace(' ','')
        self.codes    = []
    def __str__(self):
        return self.gcode + ", " + self.gname + ", codes => [" + ', '.join(map(str,self.codes)) + "]"

class Code:
    def __init__(self, **kwargs):
        self.code    = kwargs['cd_id']
        self.pcode   = kwargs['cd_pid']
        self.name    = kwargs['cd_nm']
        self.name_disp = kwargs['cd_disp_nm']
        self.name_disp_eng = kwargs['cd_disp_nm_eng']
        self.desc    = kwargs['dscrpt']
        self.enum_name = kwargs['src_nm'].replace(' ','')
        self.value   = self.get_value()
    def __str__(self):
        return self.code + ":" + self.name + "[" + self.enum_name + "]"

    def get_value(self):
        if self.name_disp != 'None':
            return self.name_disp
        else:
            return self.name

    def to_enum_name(self, val):
        if __IS_VERSION_3__:
            return "".join(x if x else '' for x in re.split('[-_/ ]',val))
        else:
            return "".join(x if x else '' for x in re.split('[-_/ ]',val))

def get_code_groups(connection_opts):
    #cnx = mysql.connector.connect(**connection_opts)
    cnx = psycopg2.connect(**connection_opts)
    cursor = cnx.cursor()
    #cursor.execute('SELECT * FROM CODE_GROUP WHERE UP_GROUP_CD IS NULL',False)
    cursor.execute('SELECT * FROM tb_common_cd {}'.format(where_sql),False)
    def to_lower(s):
        return s.lower()
    #col_names = map(to_lower,cursor.column_names)
    col_names = map(to_lower,[desc[0] for desc in cursor.description])
    if __IS_VERSION_3__:
        col_names = list(col_names)

    fetchedCursor = cursor.fetchall()
    rows = []
    for row in fetchedCursor:
        str_row = None
        if __IS_VERSION_3__:
            str_row = list(map(str, row))
        else:
            str_row = row
        map_row = dict(zip(col_names, str_row))

        row_obj = CodeGroup(**map_row)
        rows.append(row_obj)
    cursor.close()
    cnx.close()
    return rows

def get_codes(code_group , connection_opts):
    #cnx = mysql.connector.connect(**connection_opts)
    cnx = psycopg2.connect(**connection_opts)
    cursor = cnx.cursor()
    #sql = "SELECT * FROM CODE WHERE GROUP_CD = " + code_group.gcode
    sql = "SELECT * FROM tb_common_cd WHERE cd_pid = " + code_group.gcode
    # print (sql)
    cursor.execute(sql ,False)
    def to_lower(s):
        return s.lower()
    #col_names = map(to_lower,cursor.column_names)
    col_names = map(to_lower,[desc[0] for desc in cursor.description])
    if __IS_VERSION_3__:
        col_names = list(col_names)

    fetchedCursor = cursor.fetchall()
    for row in fetchedCursor:
        str_row = None
        if __IS_VERSION_3__:
            str_row = list(map(str, row))
        else:
            str_row = row
        map_row = dict(zip(col_names, str_row))

        row_obj = Code(**map_row)
        code_group.codes.append(row_obj)
    cursor.close()
    cnx.close()


code_groups = get_code_groups(con_opts)



src_prefix = """
// This source is generated by generator.
var CC = {
"""
src_suffix = "}"


template = "{ename} : {fields}\n"

src_contents = []

list_template = """
            {{
                 "code"     : {code}
                ,"value"    : "{value}"
                ,"pcode"    : {pcode}
            }}"""

def build_inline_list(codes):
    prefix = """"__list__" : ["""
    suffix = "\n        ]"
    contents =  ",".join(map(lambda c :
                                list_template.format(
                                    code = c.code
                                    ,value = c.value
                                    ,pcode = c.pcode)
                                , codes))
    return prefix + contents + suffix


for cg in code_groups:
    get_codes(cg , con_opts)
    fields = "{\n         " +  "\n        ,".join(map(lambda c : "\"" + c.enum_name + "\" : " + c.code, cg.codes)).strip() \
             + "\n        ," +  build_inline_list(cg.codes) \
             + "\n    }"

    src_contents.append(template.format(ename = cg.genum_name, fields = fields))


def write_file_core(path,  file_name, data):
    with open(os.path.join(path,file_name), 'w', encoding='utf-8') as f :
        f.write(data)

_IS_WINDOW_ = os.name == 'Windows' or os.name == 'nt'
_TEMP_DIR_ = 'C:\\Temp\generator' if _IS_WINDOW_ else os.path.join(os.path.expanduser("~"),"Temp","generator")
DATE_FORMAT="%Y%m%d.%H%M%S"
tmpfolder = datetime.datetime.strftime(datetime.datetime.now(),DATE_FORMAT)

tempdir = os.path.join(_TEMP_DIR_, 'code_js-gen-' + tmpfolder)
file_nm = 'commonCodes.js'

if not os.path.exists(tempdir):
    print ('tempdir to : {}'.format(tempdir))
    os.makedirs(tempdir)

write_file_core(tempdir, file_nm, src_prefix + "    ,".join(src_contents) + src_suffix)
print('Success : Write file -> {}'.format(os.path.join(tempdir, file_nm)))


